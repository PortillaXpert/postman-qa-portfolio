{
	"info": {
		"_postman_id": "2914e50a-1e36-4a1a-b95f-de51795fcf16",
		"name": "03 - Contract Testing & JSON Schema Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33194388",
		"_collection_link": "https://personal-qa-workspace.postman.co/workspace/QA-Portfolio~803d67d6-a5a5-400a-91af-102152a9609d/collection/33194388-2914e50a-1e36-4a1a-b95f-de51795fcf16?action=share&source=collection_link&creator=33194388"
	},
	"item": [
		{
			"name": "03.1 - JSON Schema Validation",
			"item": [
				{
					"name": "TC-SCHEMA-601: Validate User Object Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// ========================================\r",
									"// TC-SCHEMA-601: User Schema Validation\r",
									"// Test Type: CONTRACT TESTING\r",
									"// ========================================\r",
									"\r",
									"//Test 1: Response Successful\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Test 2: Response is JSON\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//JSON SCHEMA VALIDATION\r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true, verbose: true });\r",
									"\r",
									"//Add format validators\r",
									"//require('ajv-formats')(ajv);\r",
									"\r",
									"//Get schema and response\r",
									"const userSchema = JSON.parse(pm.environment.get(\"userSchema\"));\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"//Compile and validate\r",
									"const validate = ajv.compile(userSchema);\r",
									"const isValid = validate(responseData);\r",
									"\r",
									"//Test 3: Schema Validation\r",
									"pm.test(\"CONTRACT: Response matches User schema\", function () {\r",
									"    pm.expect(isValid).to.be.true;\r",
									"    \r",
									"    if (!isValid) {\r",
									"        console.error(\"Schema Validation Errors:\");\r",
									"        validate.errors.forEach(error => {\r",
									"            console.error(`  - ${error.instancePath} ${error.message}`);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test 4: Required Fields Present\r",
									"pm.test(\"CONTRACT: All required fields present\", function () {\r",
									"    const required = ['id', 'firstName', 'lastName', 'email', 'username'];\r",
									"    \r",
									"    required.forEach(field => {\r",
									"        pm.expect(responseData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"//Test 5: Data Types Correct\r",
									"pm.test(\"CONTRACT: Data types are correct\", function () {\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.firstName).to.be.a('string');\r",
									"    pm.expect(responseData.lastName).to.be.a('string');\r",
									"    pm.expect(responseData.email).to.be.a('string');\r",
									"    pm.expect(responseData.username).to.be.a('string');\r",
									"});\r",
									"\r",
									"//Test 6: Email Format Valid\r",
									"pm.test(\"CONTRACT: Email format is valid\", function () {\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(responseData.email).to.match(emailRegex);\r",
									"});\r",
									"\r",
									"//Test 7: Age Range Valid\r",
									"pm.test(\"CONTRACT: Age is within valid range\", function () {\r",
									"    if (responseData.age !== undefined) {\r",
									"        pm.expect(responseData.age).to.be.within(0, 150);\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test 8: Gender Enum Valid\r",
									"pm.test(\"CONTRACT: Gender is valid enum value\", function () {\r",
									"    if (responseData.gender) {\r",
									"        pm.expect(['male', 'female', 'other']).to.include(responseData.gender);\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test 9: Image URL Valid\r",
									"pm.test(\"CONTRACT: Image URL format valid\", function () {\r",
									"    if (responseData.image) {\r",
									"        pm.expect(responseData.image).to.include('https://');\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test 10: No Missing Required Fields\r",
									"pm.test(\"CONTRACT: No null values in required fields\", function () {\r",
									"    const required = ['id', 'firstName', 'lastName', 'email', 'username'];\r",
									"    \r",
									"    required.forEach(field => {\r",
									"        pm.expect(responseData[field]).to.not.be.null;\r",
									"        pm.expect(responseData[field]).to.not.be.undefined;\r",
									"    });\r",
									"});\r",
									"\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\r",
									"console.log(\"TC-SCHEMA-601: CONTRACT VALIDATION\");\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\r",
									"console.log(\"Schema Validation:\", isValid ? \"PASSED\" : \"FAILED\");\r",
									"console.log(\"Required Fields:\", \"All present\");\r",
									"console.log(\"Data Types:\", \"Correct\");\r",
									"console.log(\"Format Validations:\", \"Passed\");\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\r",
									"\r",
									"if (isValid) {\r",
									"    console.log(\"API Contract is maintained\");\r",
									"    console.log(\"No breaking changes detected\");\r",
									"} else {\r",
									"    console.log(\"CONTRACT VIOLATION DETECTED\");\r",
									"    console.log(\"Breaking changes found:\");\r",
									"    validate.errors.forEach(error => {\r",
									"        console.log(`   - ${error.message}`);\r",
									"    });\r",
									"}\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ========================================\r",
									"// USER SCHEMA DEFINITION (JSON Schema v7)\r",
									"// ========================================\r",
									"\r",
									"const userSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"firstName\", \"lastName\", \"email\", \"username\"],\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 1\r",
									"    },\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"email\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 0,\r",
									"      \"maximum\": 150\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [\"male\", \"female\", \"other\"]\r",
									"    },\r",
									"    \"phone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"uri\"\r",
									"    }\r",
									"  },\r",
									"  \"additionalProperties\": true\r",
									"};\r",
									"\r",
									"//Save schema to environment\r",
									"pm.environment.set(\"userSchema\", JSON.stringify(userSchema));\r",
									"\r",
									"console.log(\"User Schema loaded for validation\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-SCHEMA-602: Validate Product Object Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ========================================\r",
									"// PRODUCT SCHEMA DEFINITION\r",
									"// ========================================\r",
									"\r",
									"const productSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"title\", \"price\", \"category\"],\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 1\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"discountPercentage\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0,\r",
									"      \"maximum\": 100\r",
									"    },\r",
									"    \"rating\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0,\r",
									"      \"maximum\": 5\r",
									"    },\r",
									"    \"stock\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"brand\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 1\r",
									"    },\r",
									"    \"thumbnail\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"uri\"\r",
									"    },\r",
									"    \"images\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"uri\"\r",
									"      },\r",
									"      \"minItems\": 1\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"productSchema\", JSON.stringify(productSchema));\r",
									"console.log(\"Product Schema loaded\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ========================================\r",
									"// TC-SCHEMA-602: Product Schema Validation\r",
									"// ========================================\r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"//require('ajv-formats')(ajv);\r",
									"\r",
									"const productSchema = JSON.parse(pm.environment.get(\"productSchema\"));\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"const validate = ajv.compile(productSchema);\r",
									"const isValid = validate(responseData);\r",
									"\r",
									"//Test 1: Status\r",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"//Test 2: Schema Valid\r",
									"pm.test(\"CONTRACT: Product schema valid\", function () {\r",
									"    pm.expect(isValid).to.be.true;\r",
									"    \r",
									"    if (!isValid) {\r",
									"        console.error(\"Schema Errors:\", validate.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test 3: Required Fields\r",
									"pm.test(\"CONTRACT: Required fields present\", function () {\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('price');\r",
									"    pm.expect(responseData).to.have.property('category');\r",
									"});\r",
									"\r",
									"//Test 4: Price Positive\r",
									"pm.test(\"CONTRACT: Price is positive\", function () {\r",
									"    pm.expect(responseData.price).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test 5: Rating Range\r",
									"pm.test(\"CONTRACT: Rating in 0-5 range\", function () {\r",
									"    pm.expect(responseData.rating).to.be.within(0, 5);\r",
									"});\r",
									"\r",
									"//Test 6: Stock Non-negative\r",
									"pm.test(\"CONTRACT: Stock is non-negative\", function () {\r",
									"    pm.expect(responseData.stock).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"//Test 7: Discount Range\r",
									"pm.test(\"CONTRACT: Discount in 0-100 range\", function () {\r",
									"    pm.expect(responseData.discountPercentage).to.be.within(0, 100);\r",
									"});\r",
									"\r",
									"//Test 8: Images Array Valid\r",
									"pm.test(\"CONTRACT: Images array not empty\", function () {\r",
									"    pm.expect(responseData.images).to.be.an('array');\r",
									"    pm.expect(responseData.images.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test 9: All Images HTTPS\r",
									"pm.test(\"CONTRACT: All image URLs are HTTPS\", function () {\r",
									"    responseData.images.forEach(url => {\r",
									"        pm.expect(url).to.include('https://');\r",
									"    });\r",
									"});\r",
									"\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\r",
									"console.log(\"PRODUCT CONTRACT VALIDATION\");\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\r",
									"console.log(\"Status:\", isValid ? \"VALID\" : \"INVALID\");\r",
									"console.log(\"Product:\", responseData.title);\r",
									"console.log(\"Price: $\" + responseData.price);\r",
									"console.log(\"Stock:\", responseData.stock);\r",
									"console.log(\"Images:\", responseData.images.length);\r",
									"console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC-SCHEMA-603: Validate Cart Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const cartSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\"id\", \"products\", \"total\", \"userId\"],\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"products\": {\r",
									"      \"type\": \"array\",\r",
									"      \"minItems\": 1,\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\"id\", \"quantity\", \"price\"],\r",
									"        \"properties\": {\r",
									"          \"id\": { \"type\": \"integer\" },\r",
									"          \"quantity\": { \"type\": \"integer\", \"minimum\": 1 },\r",
									"          \"price\": { \"type\": \"number\", \"minimum\": 0 },\r",
									"          \"total\": { \"type\": \"number\" }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"total\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"discountedTotal\": {\r",
									"      \"type\": \"number\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"totalProducts\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 0\r",
									"    },\r",
									"    \"totalQuantity\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"minimum\": 0\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"cartSchema\", JSON.stringify(cartSchema));"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const cartSchema = JSON.parse(pm.environment.get(\"cartSchema\"));\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"const validate = ajv.compile(cartSchema);\r",
									"const isValid = validate(responseData);\r",
									"\r",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"CONTRACT: Cart schema valid\", () => {\r",
									"    pm.expect(isValid).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"CONTRACT: Cart has products\", () => {\r",
									"    pm.expect(responseData.products.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"CONTRACT: Each product has required fields\", () => {\r",
									"    responseData.products.forEach(product => {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('quantity');\r",
									"        pm.expect(product).to.have.property('price');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"CONTRACT: Total matches products\", () => {\r",
									"    const calculated = responseData.products.reduce((sum, p) => \r",
									"        sum + (p.price * p.quantity), 0);\r",
									"    pm.expect(responseData.total).to.be.closeTo(calculated, 0.01);\r",
									"});\r",
									"\r",
									"pm.test(\"CONTRACT: Discounted <= Total\", () => {\r",
									"    pm.expect(responseData.discountedTotal).to.be.at.most(responseData.total);\r",
									"});\r",
									"\r",
									"console.log(\"Cart Contract:\", isValid ? \"VALID\" : \"INVALID\");\r",
									"console.log(\"Products:\", responseData.totalProducts);\r",
									"console.log(\"Total: $\" + responseData.total);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Test Case ID: TC-SCHEMA-601**  \nPriority: Critical  \nObjective: Validate User API contract using JSON Schema  \n  \nTest Type: Contract Testing  \nTechnique: Schema Validation  \n  \nExpected Results:  \n\\- Response matches defined schema  \n\\- All required fields present  \n\\- Data types correct  \n\\- Format validations pass\n\n---",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}